<?php
namespace EA\Controller;

use Base\Controller\BaseFunctions;
use Base\Controller\CrudController;
use Doctrine\ORM\EntityManager;
use EA\Entity\EAContract;
use EA\Entity\EARequestPayment;
use Zend\View\Model\ViewModel;

class EAContractController extends CrudController{
    public function __construct() {
        $this->title        = "Contrato (EA)";
        $this->table        = 'EAContract';
        $this->entity       = 'EA\Entity\\'.$this->table ;
        $this->service      = 'EA\Service\\'.$this->table ;
        $this->form         = 'EA\Form\\'.$this->table ;
        $this->controller   = "ea-contract";
        $this->route        = 'ea-contract/defaults';

        $this->_listView = array(
            'title' => $this->title,
            'icon' => 'fa-file-text',
            'route' => $this->route,
            'controller' => $this->controller,
            'actions' => array(
                'enable' =>true,
                'defaults' => array(
                    'edit' => array(
                        'enable' => true,
                        'class' => 'btn btn-info',
                        'icon' => 'fa fa-edit'
                    ),
                    'delete' => array(
                        'enable' => true,
                        'class' => 'btn btn-danger decision',
                        'icon' => 'fa fa-trash'
                    ),
                    'view' => array(
                        'enable' => false,
                        'class' => 'btn btn-info',
                        'icon' => 'fa fa-eye'
                    ),
                ),
            ),
            'fields' => array(
                'id'=>array(
                    'label' => 'Id',
                    'list' => true,
                ),
                'eaStr'=>array(
                    'label' => 'EA',
                    'list' => true,
                ),
                'valueInAccountStr'=>array(
                    'label' => 'Valor na Conta',
                    'list' => true,
                ),
                'user'=>array(
                    'label' => 'Usuário',
                    'list' => true,
                ),
                'EaXmAccount'=>array(
                    'label' => 'Conta XM',
                    'list'  => true,
                ),
                'statusStr'=>array(
                    'label' => 'Status',
                    'list' => true,
                ),
                'dateStartStr'=>array(
                    'label' => 'Data da Aquisição',
                    'list' => true,
                ),
                'dateFinishStr'=>array(
                    'label' => 'Data da Expiração',
                    'list' => true,
                )
            ),
            'filters' => array(
                'user' => array(
                    'label'     => 'Usuário',
                    'type'      => 'autocomplete',
                    'column'    => 'col-md-12'
                ),
                'ea' => array(
                    'label'     => 'Expert Advisor',
                    'type'      => 'autocomplete',
                    'column'    => 'col-md-12'
                ),
                'ea-xm-account' => array(
                    'label'     => 'Conta XM',
                    'type'      => 'autocomplete',
                    'column'    => 'col-md-12'
                ),
                'status' => array(
                    'label'     => 'Status',
                    'type'      => 'select',
                    'column'    => 'col-md-12',
                ),
            )
        );
    }

    public function indexAction($entity = null, $per_page = 10)
    {
        $request = $this->getRequest();

        /**
         * @var EntityManager $em
         */
        $em = $this->getEm();

        $entity = $em->getRepository('EA\Entity\EAContract')->findBy(array(),array(
            'status' => 'ASC',
            'date_finish' => 'ASC'
        ));

        if($request->isPost())
        {
            $data = $request->getPost()->toArray();

            if(isset($data['filter-form']) || isset($_SESSION['filter-form']))
            {
                $_SESSION['filter-form'] = $data;
            }
        }

        if(isset($_SESSION['filter-form']))
        {
            $entity = $em->getRepository('EA\Entity\EAContract')->findByFilter($_SESSION['filter-form']);

            $data = $request->getPost();
            $arr = $data->toArray();

            $data->fromArray(array_merge($arr,$_SESSION['filter-form']));
            $request->setPost($data);

            $_POST = $_SESSION['filter-form'];
        }

        $per_page = 50;

        return parent::indexAction($entity, $per_page); // TODO: Change the autogenerated stub
    }

    public function blacklistEspelhamentoAction()
    {
        $this->_listView['title'] = "Contratos Expirados";
        $this->_listView['controller'] = "blacklist-espelhamento";
        $this->_listView['route'] = "blacklist-espelhamento/defaults";

        $request = $this->getRequest();

        /**
         * @var EntityManager $em
         */
        $em = $this->getEm();

//        $entity = $em->getRepository('EA\Entity\EAContract')->findBy(array(),array(
//            'status' => 'ASC',
//            'date_finish' => 'ASC'
//        ));

        $entity = $em->getRepository('EA\Entity\EAContract')->getBlackListEspelhamento();

        if($request->isPost())
        {
            $data = $request->getPost()->toArray();

            if(isset($data['filter-form']) || isset($_SESSION['filter-form']))
            {
                $_SESSION['filter-form'] = $data;
            }
        }

        $per_page = 50;

        return parent::indexAction($entity, $per_page);
    }

    public function newAction($request = null)
    {
        $em = $this->getEm();
        $request = $this->getRequest();

        $view = parent::newAction($request);

        $novo = true;
        if($request->isPost()) {
            $data = $request->getPost()->toArray();
            if(isset($_SESSION['entity_id'])){
                $db_entity = $em->getRepository('EA\Entity\EAContract')->findOneById($_SESSION['entity_id']);

                $saveFile = $this->saveReceipt($db_entity,'receipt','public/arquivos/ea/comprovantes/');

                if ($saveFile['result']) {
                    $db_entity->setReceipt($saveFile['doc_name']);
                    $this->em->persist($db_entity);

                    $service = $this->getServiceLocator()->get("EA/Service/EAContract");
                    $controller = 'ea-contract';
                    $rota = $_SERVER['REQUEST_SCHEME'].'://'.$_SERVER['SERVER_NAME'].$this->url()->fromRoute($controller.'/defaults',array(
                        'controller'=>$controller,'action'=>'edit','id'=>$db_entity->getId()
                    ));

                    if($novo){
                        $service->notificaComprovante($db_entity,$rota);
                    }

                    $this->em->flush();
                }

                unset($_SESSION['entity_id']);
            }
        }

        return $view;
    }

    public function editAction($request = null)
    {
        $em = $this->getEm();
        $request = $this->getRequest();

        if($request->isPost()) {
            /**
             * @var EAContract $db_entity
             */
            $data = $request->getPost()->toArray();

            $db_entity = $em->getRepository('EA\Entity\EAContract')->findOneById($this->params()->fromRoute('id',0));

            $saveFile = $this->saveReceipt($db_entity,'receipt','public/arquivos/ea/comprovantes/');

            if ($saveFile['result']) {
                $db_entity->setReceipt($saveFile['doc_name']);
                $this->em->persist($db_entity);
                $this->em->flush();
            }

            $date_finish_old = '';
            $alter_date = false;
            $renew = false;

            if($db_entity->getDateFinish() && $db_entity->getDateFinish() instanceof \DateTime){
                $date_finish_old = $db_entity->getDateFinish()->format('Y-m-d');
                $alter_date = $date_finish_old < $data['date_finish'];
                $renew = true;
                //Dando baixa em todas as faturas se data for diferente
                if($alter_date){

                    /**
                     * @var EARequestPayment[] $faturas
                     */
                    $faturas = $em->getRepository('EA\Entity\EARequestPayment')->findBy(array('ea_contract' => $db_entity->getId()));
                    if(!empty($faturas)){
                        foreach ($faturas as $fatura){
                            if($fatura->getValue() > 0){
                                $fatura->setDatePayment( new \DateTime('now'));
                                $fatura->setPaidOut(1);


                                $em->persist($fatura);
                                $em->flush();
                            }
                        }
                    }
                }
            }

            $alter_status = false;

            if($db_entity->getStatus() != $data['status'] && $data['status'] == 1){
                $alter_status = true;
            }

            /**
             * @var \EA\Service\EAContract $service
             */

            $service = $this->getServiceLocator()->get("EA/Service/EAContract");
            $rota = $_SERVER['REQUEST_SCHEME'].'://'.$_SERVER['SERVER_NAME'].$this->url()->fromRoute('panel-ea',array('id'=>$db_entity->getUser()->getId()));
            if($alter_status || $alter_date){
                $result = $service->notificaRenovacao($db_entity,$rota,$renew);
            }
        }

        return parent::editAction($request);
    }

    public function saveReceipt($contract,$name_field,$destiny){
        $functions = new BaseFunctions();

        $destino = $destiny;
        mkdir('public/'.$destino,0777);
        $extension = explode('.',$_FILES[$name_field]['name']);
        $uploaddir = $destino;
        $docDestinoName = $name_field."_".$contract->getId().".".$extension[count($extension)-1];
        $destino = $uploaddir . $docDestinoName ;
        $origem = $_FILES[$name_field]['tmp_name'];

        return array('result' => $functions->smartCopy($origem, $destino),'doc_name' => $docDestinoName);
    }
}
