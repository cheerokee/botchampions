<?php
namespace Configuration\Controller;

use Base\Controller\BaseFunctions;
use Base\Controller\CrudController;
use Configuration\Entity\Configuration;
use Zend\View\Model\ViewModel;
use Zend\Stdlib\Hydrator;

class ConfigurationController extends CrudController{
    public function __construct(){
        $this->title = "Configuração Geral do Sistema";
        $this->table = 'Configuration';
        $this->entity = 'Configuration\Entity\\'.$this->table ;
        $this->service = 'Configuration\Service\\'.$this->table ;
        $this->form = 'Configuration\Form\\'.$this->table ;
        $this->controller = "configuration";
        $this->route = "configuration/defaults";

        $this->_listView = array(
            'title' => $this->title,
            'icon' => 'fa-cog',
            'route' => $this->route,
            'controller' => $this->controller,
            'actions' => array(
                'enable' =>true,
                'defaults' => array(
                    'edit' => array(
                        'enable' => true,
                        'class' => 'btn btn-info',
                        'icon' => 'fa fa-edit'
                    ),
                    'delete' => array(
                        'enable' => true,
                        'class' => 'btn btn-danger decision',
                        'icon' => 'fa fa-trash'
                    ),
                    'view' => array(
                        'enable' => false,
                        'class' => 'btn btn-info',
                        'icon' => 'fa fa-eye'
                    ),
                ),
            ),
            'fields' => array(
                'id'=>array(
                    'label' => 'Id',
                    'list' => true,
                ),
                'title'=>array(
                    'label' => 'Título',
                    'list' => true,
                ),
                'chave'=>array(
                    'label' => 'Chave',
                    'list' => true,
                ),
                'value'=>array(
                    'label' => 'valor',
                    'list' => true,
                ),
            ),
        );
    }

    public function newAction($request = null)
    {
        return parent::newAction($request); // TODO: Change the autogenerated stub
    }

    public function dashUpdateAction()
    {
        $request = $this->getRequest();
        if($request->isPost())
        {
            /**
             * @var BaseFunctions $function
             */
            $function = new BaseFunctions();
            $data = $request->getPost()->toArray();
            $db_configuration = $this->getEm()
                ->getRepository('Configuration\Entity\Configuration')
                ->findOneByChave($data['chave']);

            if($data['chave'] == 'DOLAR_DISPONIVEL' || $data['chave'] == 'COTACAO_ATUAL')
            {
                $valor = $function->moedaToFloat($data['value']);
            }else if($data['chave'] == 'TAXA_FIXA' || $data['chave'] == 'COMISSAO_FIXA'){
                $valor = $function->moedaToFloat($data['value']);
            }else{
                $valor = $data['value'];
            }

            $db_configuration->setValue($valor);
            $this->getEm()->persist($db_configuration);
            $this->getEm()->flush();

            $this->flashMessenger()->addSuccessMessage("Configuração alterada com sucesso!");
        }

        return $this->redirect()->toRoute('admin');
    }

}

?>